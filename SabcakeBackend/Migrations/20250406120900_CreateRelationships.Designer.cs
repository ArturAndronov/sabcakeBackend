// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SabcakeBackend.Data;

#nullable disable

namespace SabcakeBackend.Migrations
{
    [DbContext(typeof(SabcakeDbContext))]
    [Migration("20250406120900_CreateRelationships")]
    partial class CreateRelationships
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SabcakeBackend.Models.CakeFillings", b =>
                {
                    b.Property<int>("CakeId")
                        .HasColumnType("integer");

                    b.Property<int>("FillingId")
                        .HasColumnType("integer");

                    b.HasKey("CakeId", "FillingId");

                    b.HasIndex("FillingId");

                    b.ToTable("CakeFillings");
                });

            modelBuilder.Entity("SabcakeBackend.Models.CakeTypes", b =>
                {
                    b.Property<int>("CakeId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("CakeId", "TypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("CakeTypes");
                });

            modelBuilder.Entity("SabcakeBackend.Models.Cakes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Cakes");
                });

            modelBuilder.Entity("SabcakeBackend.Models.Fillings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Fillings");
                });

            modelBuilder.Entity("SabcakeBackend.Models.Types", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("SabcakeBackend.Models.CakeFillings", b =>
                {
                    b.HasOne("SabcakeBackend.Models.Cakes", "Cake")
                        .WithMany("CakeFillings")
                        .HasForeignKey("CakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SabcakeBackend.Models.Fillings", "Filling")
                        .WithMany("CakeFillings")
                        .HasForeignKey("FillingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cake");

                    b.Navigation("Filling");
                });

            modelBuilder.Entity("SabcakeBackend.Models.CakeTypes", b =>
                {
                    b.HasOne("SabcakeBackend.Models.Cakes", "Cake")
                        .WithMany("CakeTypes")
                        .HasForeignKey("CakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SabcakeBackend.Models.Types", "Type")
                        .WithMany("CakeTypes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cake");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SabcakeBackend.Models.Cakes", b =>
                {
                    b.Navigation("CakeFillings");

                    b.Navigation("CakeTypes");
                });

            modelBuilder.Entity("SabcakeBackend.Models.Fillings", b =>
                {
                    b.Navigation("CakeFillings");
                });

            modelBuilder.Entity("SabcakeBackend.Models.Types", b =>
                {
                    b.Navigation("CakeTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
